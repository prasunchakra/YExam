// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments    Enrollment[]
  testAttempts   TestAttempt[]
  customQuizzes  CustomQuiz[]
  quizAttempts   QuizAttempt[]
}

model Exam {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  category    String   // UPSC, Banking, IIT JEE, NEET, CAT
  duration    Int      // in minutes
  totalMarks  Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subjects    Subject[]
  enrollments Enrollment[]
}

model Subject {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  examId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  exam        Exam         @relation(fields: [examId], references: [id])
  topics      Topic[]
  testPapers  TestPaper[]
}

model Topic {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  subjectId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject     Subject     @relation(fields: [subjectId], references: [id])
  questions   Question[]
}

model TestPaper {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  duration    Int      // in minutes
  totalMarks  Int
  isActive    Boolean  @default(true)
  subjectId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject     Subject      @relation(fields: [subjectId], references: [id])
  sections    Section[]
  attempts    TestAttempt[]
}

model Section {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  duration    Int?     // in minutes, null means no time limit
  totalMarks  Int
  testPaperId String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  testPaper   TestPaper   @relation(fields: [testPaperId], references: [id])
  questions   Question[]
}

model Question {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  question    String
  type        QuestionType @default(MULTIPLE_CHOICE)
  marks       Int          @default(1)
  difficulty  Difficulty   @default(MEDIUM)
  explanation String?
  topicId     String       @db.ObjectId
  sectionId   String       @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  topic       Topic        @relation(fields: [topicId], references: [id])
  section     Section      @relation(fields: [sectionId], references: [id])
  options     Option[]
  answers     Answer[]
  quizAnswers QuizAnswer[]
}

model Option {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  isCorrect  Boolean @default(false)
  questionId String  @db.ObjectId

  // Relations
  question   Question @relation(fields: [questionId], references: [id])
}

model Enrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  examId    String   @db.ObjectId
  enrolledAt DateTime @default(now())

  // Relations
  user      User @relation(fields: [userId], references: [id])
  exam      Exam @relation(fields: [examId], references: [id])

  @@unique([userId, examId])
}

model TestAttempt {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  testPaperId  String   @db.ObjectId
  startedAt    DateTime @default(now())
  submittedAt  DateTime?
  timeSpent    Int?     // in minutes
  totalMarks   Int      @default(0)
  obtainedMarks Int     @default(0)
  percentage   Float    @default(0)
  rank         Int?
  isCompleted  Boolean  @default(false)

  // Relations
  user         User         @relation(fields: [userId], references: [id])
  testPaper    TestPaper    @relation(fields: [testPaperId], references: [id])
  answers      Answer[]
}

model Answer {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  testAttemptId  String   @db.ObjectId
  questionId     String   @db.ObjectId
  selectedOption String?  // For MCQ
  textAnswer     String?  // For text answers
  isCorrect      Boolean  @default(false)
  marksObtained  Int      @default(0)
  timeSpent      Int?     // in seconds
  isMarked       Boolean  @default(false) // For review

  // Relations
  testAttempt    TestAttempt @relation(fields: [testAttemptId], references: [id])
  question       Question    @relation(fields: [questionId], references: [id])

  @@unique([testAttemptId, questionId])
}

model CustomQuiz {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  userId      String   @db.ObjectId
  subjectIds  String[] @db.ObjectId // Array of subject IDs
  topicIds    String[] @db.ObjectId // Array of topic IDs
  questionCount Int
  duration    Int      // in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id])
  attempts    QuizAttempt[]
}

model QuizAttempt {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  customQuizId String   @db.ObjectId
  startedAt    DateTime @default(now())
  submittedAt  DateTime?
  timeSpent    Int?     // in minutes
  totalMarks   Int      @default(0)
  obtainedMarks Int     @default(0)
  percentage   Float    @default(0)
  isCompleted  Boolean  @default(false)

  // Relations
  user         User         @relation(fields: [userId], references: [id])
  customQuiz   CustomQuiz   @relation(fields: [customQuizId], references: [id])
  answers      QuizAnswer[]
}

model QuizAnswer {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  quizAttemptId  String   @db.ObjectId
  questionId     String   @db.ObjectId
  selectedOption String?
  textAnswer     String?
  isCorrect      Boolean  @default(false)
  marksObtained  Int      @default(0)
  timeSpent      Int?

  // Relations
  quizAttempt    QuizAttempt @relation(fields: [quizAttemptId], references: [id])
  question       Question    @relation(fields: [questionId], references: [id])

  @@unique([quizAttemptId, questionId])
}

enum Role {
  STUDENT
  ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  SHORT_ANSWER
  ESSAY
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}